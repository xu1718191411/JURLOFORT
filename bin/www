#!/usr/bin/env node
var debug = require('debug')('home');
var app = require('../app');
var fs = require("fs");
var SessionSockets = require('session.socket.io');
var Steps = require("ocsteps") ;
var wwwConfig = require("../config/www.js")

var mongo = require("../model/mongo.js");
var tool = require("../controller/tool.js");
var steps = require('ocsteps');


app.set('port', process.env.PORT || wwwConfig.wwwPort);
console.log("server is listening on port "+wwwConfig.wwwConfig);

//var server = app.listen(app.get('port'), function() {
//  debug('Express server listening on port ' + server.address().port);
//});

var server = require("./server.js").server;


var io = require('socket.io')(server);
var sessionSockets = new SessionSockets(io, app.sessionStore, app.cookieParser);





sessionSockets.of("/debate").on('connection', function (err, socket, session) {
    //your regular socket.io code goes here
    //and you can still use your io object

    socket.on("enterRoom",function(msg){
        console.log("enter room session is the following...")
        console.log(session.debateLogin)

        var loginInfo = session.debateLogin
        delete loginInfo['password']
        var lastest = {}
        steps(
            function(){
            mongo.find("statementLog",{lastest:1},{},this.hold(function(result){
                    lastest.statement = result[0]
            }))
            },
            function(){
             mongo.find("analysisLog",{lastest:1},{},this.hold(function(result){
                    lastest.analysis = result[0]
             }))
            },
            function(){
            // 传给刚进入房间或者是再次进入房间的用户status
           mongo.find("debateStatus",{num:loginInfo.num},{},this.hold(function(result){
                   return result[0].status
           }))
        },function(status){
            socket.emit("enterRoom",{loginInfo:loginInfo,status:status,lastest:lastest})
            socket.broadcast.emit("enterRoom",{loginInfo:loginInfo})
        })()

    })

    socket.on("getLastest",function(msg){
            steps(function(){

                mongo.find("statementLog",{},{},this.hold(function(result){

                }))

            })()
    })


    socket.on("prepare",function(msg){
        var prepareInfo = session.debateLogin
        delete prepareInfo['password']
        socket.emit("prepare",{prepareInfo:prepareInfo})
        socket.broadcast.emit("prepare",{prepareInfo:prepareInfo})


        steps(function(){

            mongo.find("debateStatus",{num:session.debateLogin.num},{},this.hold(function(result){
                var proPrepare = result[0].proPrepare
                var conPrepare = result[0].conPrepare

                if(parseInt(proPrepare) == 1  && parseInt(conPrepare) == 1){

                    //debateStatus status
                    // 0 pro 做陈述
                    // 1 con 做分析
                    // 2 con 做陈述
                    // 3 pro 做分析

                    //userStatus status
                    //   -1 logout
                    //    0 login
                    //    1 entering
                    //    2 debating

                    mongo.update("userStatus",{username:result[0].pro,num:result[0].num},{$set:{status:2}},{},function(result){

                    })

                    mongo.update("userStatus",{username:result[0].con,num:result[0].num},{$set:{status:2}},{},function(result){

                    })

                    mongo.update("debateStatus",{num:session.debateLogin.num},{$set:{status:0}},{},this.hold(function(res){
                        socket.emit("allPrepare",{status:0})
                        socket.broadcast.emit("allPrepare",{status:0})
                    }))
                }
            }))


        },function(){


        })()
    })


    socket.on("makeStatement",function(msg){

        // 0 pro 做陈述
        // 1 con 做分析
        // 2 con 做陈述
        // 3 pro 做分析

        //把陈述内容计入数据库
        steps(function(){
            mongo.createIfNotExists("statementLog",this.hold(function(result){

            }))
        },function(){
            mongo.update("statementLog",{num:session.debateLogin.num},{$unset:{lastest:1}},{multi:true},this.hold(function(result){

            }))
        },function(){
            mongo.insert("statementLog",{num:session.debateLogin.num,position:session.debateLogin.position,lastest:1,submitContentArr:msg.submitContentArr,time:Date.parse(new Date())},{},this.hold(function(result){

            }))
        },function(){
            //如果是pro方做陈述的话，修改当前处于第几轮
            if(session.debateLogin.position == 1){
                mongo.update("debateStatus",{num:session.debateLogin.num},{$inc:{numberOrder:1}},{},this.hold(function(result){

                }))
            }
        },function(){
            mongo.find("debateStatus",{num:session.debateLogin.num},{},this.hold(function(result){
                var status = result[0].status || 0
                msg.numberOrder = result[0].numberOrder
                msg.status = status

                if(msg.violate == 1){
                        if(msg.status==0){
                            status = 2
                            socket.broadcast.emit("restartFromCon",{status:status})
                            socket.emit("restartFromCon",{status:status})
                        }else{
                            status = 0
                            socket.broadcast.emit("restartFromPro",{status:status})
                            socket.emit("restartFromPro",{status:status})
                        }

                    return status-1;
                }else{
                    msg.status = (status + 1)%4
                    socket.emit("receiveStatement",msg)
                    socket.broadcast.emit("receiveStatement",msg)
                    socket.emit("DoAnalysis",msg)
                    socket.broadcast.emit("DoAnalysis",msg)
                    return status;
                }

            }))
        },function(status){
            status = (status + 1)%4
            mongo.update("debateStatus",{num:session.debateLogin.num},{$set:{status:status}},{},this.hold(function(result){
                console.log(result)
            }))
        })()


    })

    socket.on("makeAnalysis",function(msg){

        if(msg.violate == 1){
            steps(function(){
                mongo.find("debateStatus",{num:session.debateLogin.num},{},this.hold(function(result){
                    var status = result[0].status

                    if(status == 1){
                        status = 2
                        socket.broadcast.emit("restartFromCon",{status:status})
                        socket.emit("restartFromCon",{status:status})
                    }

                    if(status == 3){
                        status = 0
                        socket.broadcast.emit("restartFromPro",{status:status})
                        socket.emit("restartFromPro",{status:status})
                    }

                    return status;
                }))
            },function(status){
                mongo.update("debateStatus",{num:session.debateLogin.num},{$set:{status:status}},{},this.hold(function(result){
                    console.log(result)
                }))
            })()


            return false;
        }

        steps(function(){
               mongo.createIfNotExists("analysisLog",this.hold(function(result){

               }))
        },function(){
                mongo.update("analysisLog",{num:session.debateLogin.num},{$unset:{lastest:1}},{multi:true},this.hold(function(result){

                }))
        },function(){
                mongo.insert("analysisLog",{num:session.debateLogin.num,position:session.debateLogin.position,lastest:1,obj:msg._obj,dissentObj:msg.dissentObj,fenduanArr:msg.fenduanArr,time:Date.parse(new Date())},{},this.hold(function(result){

                }))
        },function(){
            mongo.find("debateStatus",{num:session.debateLogin.num},{},this.hold(function(result){
                var status = result[0].status
                msg.numberOrder = result[0].numberOrder
                msg.status = (status + 1)%4
                socket.emit("receiveAnalysis",msg)
                // msg is the following...
                // { _obj: [ { claimTxt: '勉強用の時間が減少しても，学業が疎かにならない', warrant: [Object] } ],
                //     dissentObj: [ { claimDissnet: '', warrant: [Object] } ],
                //     fenduanArr: [ 1 ],
                //     numberOrder: 1,
                //     status: 2 }
                //var dissentObj = [{"claimDissent":1,"warrant":[{"warrantDissent":1,"evidenceDissent":[1]}]}]
                //var _obj =  [{"claimTxt":"勉強用の時間が減少しても，学業が疎かにならない","warrant":[{"warrantTxt":"大切にするから，時間の効率がよくなって，勉強の効果も上がる","evidence":[{"evidenceTxt":"勉強用の時間が少なければ，その時間を大切することになる"}]}]}]

                socket.broadcast.emit("receiveAnalysis",msg)
                return status;
            }))

        },function(status){
            status = (status + 1)%4
            mongo.update("debateStatus",{num:session.debateLogin.num},{$set:{status:status}},{},this.hold(function(result){
                console.log(result)
            }))
        })()

    })

    //监测到客户端的时间违规时间
    socket.on("timeLimitViolate",function(){
                //console.log("session debateLogin is the following....")
                //console.log(session.debateLogin)
                //{ username: 'villa', group: 'miyoshi', num: 1, position: 2 }

        //查看当前debate的状态从而得知是谁在哪个状态里时间违规的
        steps(function(){
            mongo.find("debateStatus",{num:session.debateLogin.num},{},this.hold(function(result){
                var status = result[0].status

                console.log("the status is the following....")
                console.log(status)

                //再把违规事件发送给客户端并且告诉客户端在debate的哪个状态下产生的时间违规的
                socket.emit("disposal",{status:status})
                socket.broadcast.emit("disposal",{status:status})
            }))
        })()

    })

    socket.on('disconnect', function(msg){

        console.log("room debate has been out of connection")
        console.log(msg)
        if(!session){
            return
        }
        console.log(session.debateLogin)

        var username = session.debateLogin.username
        var group = session.debateLogin.group
        var num = session.debateLogin.num
        var position = session.debateLogin.position


        //userStatus status
        //   -1 logout
        //    0 login
        //    1 entering
        //    2 debating

        steps(function(){
            mongo.find("userStatus",{username:username,num:num},{},this.hold(function(result){
                    if(result[0].status<2){
                        mongo.update("userStatus",{username:username,num:num},{$set:{status:0},$unset:{num:1}},this.hold(function(result){

                        }))

                        if(position==1){
                            var update = {$unset:{pro:1,proPrepare:1}}
                        }else{
                            var update = {$unset:{con:1,conPrepare:1}}
                        }

                        mongo.update("debateStatus",{num:num},update,{},this.hold(function(result){
                                delete session.debateLogin.num
                                delete session.debateLogin.position
                                session.save()
                        }))
                    }
            }))
        })()

        //if(!session){
        //    return;
        //}
        //if(!session.debateLogin){
        //    return;
        //}
        //var num = session.debateLogin.num;
        //var position = session.debateLogin.position
        //
        //if(position == 1){
        //        var update = {$unset:{pro:1}}
        //}else{
        //        var update = {$unset:{con:1}}
        //}
        //
        //mongo.update("debateStatus",{num:num},update,{},function(result){
        //
        //})
        //console.log('user disconnected');
    });

});


sessionSockets.of("/group").on('connection', function (err, socket, session) {

    socket.on('join',function(jsonData){
        var position = jsonData.position
        var num = jsonData.num

        if(position == 1){
            var update = {$set:{pro:session.debateLogin.username}}
        }else{
            var update = {$set:{con:session.debateLogin.username}}
        }

        steps(function(){
            mongo.update("debateStatus",{num:jsonData.num},update,this.hold(function(result){

            }))
        },function(){
            mongo.find("debateStatus",{num:jsonData.num},{},function(result){
                //在session中写入num
                session.debateLogin.num = num
                session.debateLogin.position = position
                session.save()
                socket.broadcast.emit("joined",result[0])
            })
        })()

    })


    socket.on('disconnect', function(){
        console.log("room group is out of connection")
    })

})

//
//io.on('connection',function(socket){
//
//})